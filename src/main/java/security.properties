#Session有效期，单位s，这是一个相对值，相对于用户最后一次访问的时间
#也就是说，只有当用户超过此时间不活跃，Session才会失效
session.expiresMilliseconds=2592000000
session.gc.open=true
session.gc.script=for i=48,83,1 do     local partition     if(i > 57) then         partition = string.char(i + 39)     else         partition = string.char(i)     end          local setkey = 'security:session:set:'..partition     local principals = redis.call('ZRANGEBYSCORE', setkey, '-inf', ARGV[1])     redis.call('ZREMRANGEBYSCORE', setkey, '-inf', ARGV[1])     if(principals and (table.maxn(principals) > 0)) then         for ii,vv in ipairs(principals) do             local hashkey = 'security:session:hash:'..partition             redis.call('HDEL', hashkey, vv)         end     end end
session.gc.gcDelaySecond=86400



#cookie名称
cookie.name=sid
#cookie域名
cookie.domain=.cospace.xyz
#cookie路径
cookie.path=/
#此配置为true时，cookie无法通过js脚本操作
cookie.http_only=true
#是否启用HTTPS
cookie.secure=true
#cookie有效期，一般不需要改动，目前设置的是最大值，相当于永不过期
#因为cookie的生命周期由服务器端维护，所以客户端不需要关心过期时间
cookie.max_age=315360000



#Redis 连接工厂
common.redisResourceFactory=cc.cospace.web.security.dao.DefaultRedisResourceFactory



core.securityManager=org.yangyuan.security.core.DefaultSecurityManager
core.principalFactory=org.yangyuan.security.core.DefaultPrincipalFactory
core.cacheManager=org.yangyuan.security.core.DefaultCacheManager
#是否复用客户端subject
#如果设为true，客户端登陆时如果携带有subject信息，那么复用此subject，不再创建新的subject
#如果设为false，则登录时忽略客户端携带的subject信息，总是创建新的subject
core.useClientSubjectLogin=false
#认证回调
core.securityAuthHandler=cc.cospace.web.security.core.DefaultSecurityAuthHandler



dao.ehcacheSessionDao=org.yangyuan.security.dao.EhcacheSessionDao
dao.redisSessionDao=org.yangyuan.security.dao.RedisSessionDao
dao.jdbcRealm=org.yangyuan.security.realm.jdbc.JdbcRealm
dao.remoteRealm=org.yangyuan.security.realm.remote.RemoteRealm
dao.jdbcSessionDao=org.yangyuan.security.dao.JdbcSessionDao
dao.remoteSessionDao=org.yangyuan.security.dao.RemoteSessionDao
#用户名密码登录适配器
dao.jdbcRealmAdaptor=userService
#第三方登录适配器
dao.remoteRealmAdaptor=userService



#cache在内存中最多可以存放的元素的数量。
#0表示没有限制。
#如果放入cache中的元素超过这个数值，有两种可能：
#1、若overflowToDisk的属性值为true，会将cache中多出的元素放入磁盘文件中。
#2、若overflowToDisk的属性值为false，会根据memoryStoreEvictionPolicy的策略替换cache中原有的元素。
cache.maxElementsInMemory=10000
#缓存是否永驻内存。
#如果值是true，cache中的元素将一直保存在内存中，不会因为时间超时而丢失。
#因此在这个值为true的时候，timeToIdleSeconds和timeToLiveSeconds两个属性的值就不起作用了。
cache.eternal=false
#内存中的元素数量溢出是否写入磁盘。
#系统会根据标签<diskStore path="java.io.tmpdir"/>中path的值查找对应的属性值。
#如果系统的java.io.tmpdir的值是/temp，写入磁盘的文件就会放在这个文件夹下，文件的名称是cache的名称，后缀名为data。
cache.overflowToDisk=false
#是否持久化内存中的缓存到磁盘。
#当这个属性的值为true时，系统在初始化的时候会在磁盘中查找文件名为cache名称，后缀名为index的的文件，如CACHE_FUNC.index。
#这个文件中存放了已经持久化在磁盘中的cache的index，找到后把cache加载到内存。
cache.diskPersistent=false
#访问cache中元素的最大间隔时间。
#如果超过此时间cache中的某个元素没有任何访问，那么这个元素将被从cache中清除。
cache.timeToIdleSeconds=900
#cache中元素的总生存时间，cache中的某个元素从创建到消亡的时间。
#从创建开始计时，当超过这个时间，这个元素将被从cache中清除，即便是这个元素被频繁访问。
cache.timeToLiveSeconds=7200
#内存存储与释放清理策略
#LRU最近最少使用
#LFU历史访问频率最低
#FIFO先进先出
cache.memoryStoreEvictionPolicy=LRU


